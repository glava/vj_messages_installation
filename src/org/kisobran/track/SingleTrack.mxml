<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:track="org.kisobran.track.*"
		 height="256">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.effects.Move;
			import mx.utils.OrderedObject;
			
			import org.kisobran.track.event.TrackEvent;
			import org.kisobran.util.Util;
			
			import spark.components.Label;

			private var _speed:int = 5;
			private var _splitedInNewLine:Boolean = false;
			private var _messageTextUpdated:Boolean = false;
			private var _messages:ArrayList;
			private var _currentlyVisibile:int = 0;
			
			private var _orderOfSwitcherLabel:int = 0;
			
			public function get speed():int {
				return _speed;
			}

			public function set speed(value:int):void {
				_speed = value;
			}
			
			protected function group1_enterFrameHandler(event:Event):void
			{
				for (var i:int = 0; i < Config.NUMBER_OF_MESSAGES; i++) {
					var movingLabel:MovingLabel =  this["track"+i];
					//just move visible labels
					if(movingLabel.visible){
						_currentlyVisibile = i;
						movingLabel.x += speed;
						// if label left the screen, move next label to screen
						if(movingLabel.x > 1024) {
							movingLabel.visible = false;
							switch(i) {
								case 0: startMovingLabel(track1, _messages.toArray()[1]); break; 
								case 1: startMovingLabel(track2, _messages.toArray()[2]); break; 
								case 2: startMovingLabel(track3, _messages.toArray()[3]); break; 
								case 3: startMovingLabel(track4, _messages.toArray()[4]); break; 
								case 4: startMovingLabel(track0, _messages.toArray()[0]); break; 
							}
							
						}
						// in case that this label has been updated and that it's touching the edge of the screen
						//and the line hasn't be transferd to another line => tranfer to another line
						if(i == _orderOfSwitcherLabel && movingLabel.x + movingLabel.width > 1024 && !_splitedInNewLine) {
							_splitedInNewLine = true;
							dispatchEvent(new TrackEvent(TrackEvent.START_IN_NEW_LINE,_messages));
						}
					}
				}
			}
			
			private function startMovingLabel(trackLabel:MovingLabel, label:String):void {
				trackLabel.setMessage(label);
				trackLabel.visible = true;
				//this is aproximation. i wanted to have some close x position
				//without waiting flex to give me new width
				trackLabel.x = -( trackLabel.fontSize * 0.5 * label.length);
			}
			
			
			public function updateLabels(messages:ArrayList):void {
				
					for (var i:int = 0; i < 5; i++) {
						var movingLabel:MovingLabel =  this["track"+i];
						if(!movingLabel.visible){
							movingLabel.x = - 1000;
							movingLabel.setMessage(messages.toArray()[i]);
						}
					}
				
				_messageTextUpdated = true;
				invalidateProperties();
				invalidateDisplayList();	
				
				_orderOfSwitcherLabel = Util.incrementInMod(_currentlyVisibile, Config.NUMBER_OF_MESSAGES);
				_messages = messages;
				_splitedInNewLine = false;
			}
			
			private function setLabelsOnInitialPosition():void {
				for (var i:int = 0; i < 5; i++) {
					
					var movingLabel:MovingLabel =  this["track"+i];
					if(!movingLabel.visible){
						movingLabel.x = -movingLabel.width;
					}
				}
				this["track"+_currentlyVisibile].visible = true;
			}
			
			public function startMoving():void {
				
				if(!this.hasEventListener(Event.ENTER_FRAME)){
					this.addEventListener(Event.ENTER_FRAME,group1_enterFrameHandler);
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if(_messageTextUpdated == true) {
					_messageTextUpdated = false;
					setLabelsOnInitialPosition();
					startMoving();
				}
			} 

			public function get currentlyVisibile():int {
				return _currentlyVisibile;
			}

			public function set currentlyVisibile(value:int):void
			{
				_currentlyVisibile = value;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<track:MovingLabel id="track0" visible="false" x="-500"/>
	<track:MovingLabel id="track1" visible="false" x="-100"/>
	<track:MovingLabel id="track2" visible="false" x="-100"/>
	<track:MovingLabel id="track3" visible="false" x="-100"/>
	<track:MovingLabel id="track4" visible="false" x="-100"/>
</s:Group>
